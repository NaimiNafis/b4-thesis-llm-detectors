{"index": "gj001765", "code": "public static String stripChar(final String string, final char c) {\n\t\tif (string.length() == 0) {\n\t\t\treturn string;\n\t\t}\n\t\tif (string.length() == 1) {\n\t\t\tif (string.charAt(0) == c) {\n\t\t\t\treturn StringPool.EMPTY;\n\t\t\t}\n\t\t\treturn string;\n\t\t}\n\t\tint left = 0;\n\t\tint right = string.length();\n\t\tif (string.charAt(left) == c) {\n\t\t\tleft++;\n\t\t}\n\t\tif (string.charAt(right - 1) == c) {\n\t\t\tright--;\n\t\t}\n\t\treturn string.substring(left, right);\n\t}", "contrast": "public static String strip(String str, char ch) {\n    int len = str.length();\n    int st = 0;\n    while ((st < len) && (str.charAt(st) == ch)) {\n        st++;\n    }\n    while ((st < len) && (str.charAt(len - 1) == ch)) {\n        len--;\n    }\n    return ((st > 0) || (len < str.length())) ? str.substring(st, len) : str;\n}", "label": 0}
{"index": "gj171993", "code": "public CommerceWarehouseItem createCommerceWarehouseItem(long commerceWarehouseItemId) {\n    CommerceWarehouseItem commerceWarehouseItem = new CommerceWarehouseItemImpl();\n    commerceWarehouseItem.setCommerceWarehouseItemId(commerceWarehouseItemId);\n    return commerceWarehouseItem;\n}", "contrast": "@Override\n\tpublic com.liferay.commerce.model.CommerceWarehouseItem createCommerceWarehouseItem(\n\t\tlong commerceWarehouseItemId) {\n\t\treturn _commerceWarehouseItemLocalService.createCommerceWarehouseItem(commerceWarehouseItemId);\n\t}", "label": 1}
{"index": "gj040529", "code": "private static Map<String, Object> exampleMapForProperties(Map<String, Property> properties, Map<String, Model> definitions, DocumentResolver definitionDocumentResolver, MarkupDocBuilder markupDocBuilder, Map<String, Integer> refStack) {\n        Map<String, Object> exampleMap = new LinkedHashMap<>();\n        if (properties != null) {\n            for (Map.Entry<String, Property> property : properties.entrySet()) {\n                Object exampleObject = property.getValue().getExample();\n                if (exampleObject == null) {\n                    if (property.getValue() instanceof RefProperty) {\n                        exampleObject = generateExampleForRefModel(true, ((RefProperty) property.getValue()).getSimpleRef(), definitions, definitionDocumentResolver, markupDocBuilder, refStack);\n                    } else if (property.getValue() instanceof ArrayProperty) {\n                        exampleObject = generateExampleForArrayProperty((ArrayProperty) property.getValue(), definitions, definitionDocumentResolver, markupDocBuilder, refStack);\n                    } else if (property.getValue() instanceof MapProperty) {\n                        exampleObject = generateExampleForMapProperty((MapProperty) property.getValue(), markupDocBuilder);\n                    }\n                    if (exampleObject == null) {\n                        Property valueProperty = property.getValue();\n                        exampleObject = PropertyAdapter.generateExample(valueProperty, markupDocBuilder);\n                    }\n                }\n                exampleMap.put(property.getKey(), exampleObject);\n            }\n        }\n        return exampleMap;\n    }", "contrast": "public Map<String, Object> generateExamplesFromProperties(Map<String, Property> properties, Map<String, Schema> definitions, MarkupDocBuilder markupDocBuilder, Map<String, Schema> refStack) {\n    Map<String, Object> examplesMap = new HashMap<>();\n    for (Map.Entry<String, Property> entry : properties.entrySet()) {\n        String propertyName = entry.getKey();\n        Property property = entry.getValue();\n        Schema schema = property instanceof ObjectSchema ? ((ObjectSchema) property) : null;\n        Object example = null;\n        if (schema != null && schema.getExample() != null) {\n            example = schema.getExample();\n        } else if (property.getExamples() != null && !property.getExamples().isEmpty()) {\n            example = property.getExamples().get(0);\n        } else {\n            Schema propertyDefinition = schema != null ? schema : ModelUtils.getSchemaFromProperty(property, definitions, refStack);\n            if (propertyDefinition != null) {\n                example = ModelUtils.generateExample(propertyDefinition, definitions, markupDocBuilder, refStack);\n            }\n        }\n        if (example != null) {\n            examplesMap.put(propertyName, example);\n        }\n    }\n    return examplesMap;\n}", "label": 0}
{"index": "gj061805", "code": "private Multimap<String, byte[]> copyAuthInfo(Multimap<String, byte[]> authInfos) {\n    Multimap<String, byte[]> result = ArrayListMultimap.create();\n    for (Map.Entry<String, byte[]> entry : authInfos.entries()) {\n      byte[] info = entry.getValue();\n      result.put(entry.getKey(), info == null ? null : Arrays.copyOf(info, info.length));\n    }\n    return result;\n  }", "contrast": "import com.google.common.collect.ListMultimap;\nimport com.google.common.collect.Multimaps;\npublic class AuthInfo {\n    public static <K, V> ListMultimap<K, V> deepCopy(ListMultimap<K, V> authInfos) {\n        return Multimaps.newListMultimap(authInfos.keySet(),\n                () -> new ArrayList<>(authInfos.size()))\n                .also((copy) -> copy.putAll(authInfos));\n    }\n}", "label": 0}
{"index": "gj252492", "code": "public Object addToFront(Object object) {\n    Node newNode = new Node(object);\n    newNode.next = head;\n    head = newNode;\n    return newNode.data;\n}", "contrast": "public Element<T> pushHead( T object ) {\n\t\tElement<T> e = requestNew();\n\t\te.object = object;\n\t\tif( first == null ) {\n\t\t\tfirst = last = e;\n\t\t} else {\n\t\t\te.next = first;\n\t\t\tfirst.previous = e;\n\t\t\tfirst = e;\n\t\t}\n\t\tsize++;\n\t\treturn e;\n\t}", "label": 1}
